generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  userGoogleId String  @id @db.VarChar
  userEmail    String  @unique @db.VarChar
  userName     String  @db.VarChar
  stm32Id      String? @db.VarChar
  stm32        Stm32?  @relation(fields: [stm32Id], references: [stm32Id])

  @@map("users")
}

model Stm32 {
  stm32Id        String     @id @db.VarChar
  stm32Threshold Int?
  mode           Stm32Mode
  terminals      Terminal[]
  users          User[]

  @@map("stm32")
}

model Terminal {
  terminalId       String         @id @db.VarChar
  stm32Id          String         @db.VarChar
  terminalPriority Int            @default(0)
  terminalStatus   TerminalStatus
  startOn          DateTime?
  finishOn         DateTime?
  powerUsages      PowerUsage[]
  stm32            Stm32          @relation(fields: [stm32Id], references: [stm32Id], onDelete: Cascade)

  @@index([stm32Id])
  @@map("terminals")
}

model PowerUsage {
  powerUsageId Int      @id @default(autoincrement())
  terminalId   String   @db.VarChar
  power        Float
  ampere       Float
  volt         Float
  timestamp    DateTime @default(now())
  terminal     Terminal @relation(fields: [terminalId], references: [terminalId], onDelete: Cascade)

  @@index([terminalId])
  @@map("powerUsage")
}

model knapsack_logs {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  max_capacity   Int?
  result_json    Json?
  total_power    Float?
  total_priority Int?
}

enum Stm32Mode {
  Otomatis
  Manual
}

enum TerminalStatus {
  off
  on

}
